{"version":3,"sources":["components/PageHeader.tsx","components/SearchArea.tsx","components/BookCard.tsx","components/PaginationPanel.tsx","components/BooksListHeader.tsx","components/BooksList.tsx","components/Books.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["PageHeader","className","SearchArea","handleSearchInput","searchBooks","handleSort","type","onChange","onKeyUp","e","key","onClick","defaultValue","disabled","value","BookCard","publishedDate","title","thumbnail","book","src","alt","href","infoLink","target","rel","authors","authorNames","reduce","names","name","slice","renderAuthors","PaginationPanel","currentPage","maxPage","paginate","aria-label","BooksListHeader","totalResults","BooksList","books","map","id","Books","useState","noResults","setNoResults","setBooks","searchText","setSearchText","sort","setSort","setTotalResults","setMaxPage","page","setPage","fetchBooks","axios","get","params","q","startIndex","maxResults","then","response","console","log","data","totalItems","Math","ceil","bookList","items","item","volumeInfo","hasOwnProperty","imageLinks","substring","catch","error","useEffect","oldBooks","a","b","parseInt","newPage","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.9f39bee0.chunk.js","sourcesContent":["import React from 'react';\n\nfunction PageHeader() {\n  return (\n    <div className=\"container-fluid p-2 bg-dark mb-4\">\n      <h2 className=\"text-light\">Books</h2>\n    </div>\n  );\n}\n\nexport default PageHeader;\n","import React from 'react';\n\ninterface SearchAreaProps {\n  handleSearchInput(e: React.ChangeEvent<HTMLInputElement>): void;\n  searchBooks(): void;\n  handleSort(e: React.ChangeEvent<HTMLSelectElement>): void;\n}\n\nfunction SearchArea({ handleSearchInput, searchBooks, handleSort }: SearchAreaProps) {\n  return (\n    <div className=\"container w-50 mb-5\">\n      <div className=\"row\">\n        <div className=\"col-8\">\n          <div className=\"input-group\">\n            <input\n              type=\"text\"\n              onChange={handleSearchInput}\n              onKeyUp={(e) => {\n                if (e.key === 'Enter') searchBooks();\n              }}\n              className=\"form-control\"\n            />\n            <div className=\"input-group-append\">\n              <button className=\"btn btn-primary\" onClick={searchBooks}>\n                Search\n              </button>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"col-4\">\n          <div className=\"input-group\">\n            <select className=\"custom-select\" defaultValue=\"sort\" onChange={handleSort}>\n              <option disabled value=\"sort\">\n                Sort\n              </option>\n              <option value=\"newest\">Newest</option>\n              <option value=\"oldest\">Oldest</option>\n            </select>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default SearchArea;\n","import React from 'react';\n\ninterface Book {\n  infoLink: string;\n  id: string;\n  thumbnail: string;\n  title: string;\n  publishedDate: string;\n  authors: string[];\n}\n\ninterface BookCardProps {\n  book: Book;\n}\n\nfunction BookCard({ book }: BookCardProps) {\n  function renderThumbnail(thumbnail) {\n    if (thumbnail) {\n      return <img src={thumbnail} className=\"img-fluid\" alt=\"Image Not Available\" />;\n    } else {\n      const imageNotAvailableUrl =\n        'https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcSXB4H7zcUL8kHWZseJueSBsiOAAPGJK63-kQ&usqp=CAU';\n      return <img src={imageNotAvailableUrl} className=\"img-fluid\" alt=\"Image Not Available\" />;\n    }\n  }\n\n  function renderTitle(title: string) {\n    if (title) {\n      return (\n        <a className=\"font-weight-bold my-1\" href={book.infoLink} target=\"_blank\" rel=\"noreferrer\">\n          {title}\n        </a>\n      );\n    } else {\n      return <p className=\"text-muted font-italic my-1\">title not available</p>;\n    }\n  }\n\n  function renderAuthors(authors: string[]) {\n    if (authors) {\n      const authorNames = authors\n        .reduce((names, name) => {\n          return names + name + ', ';\n        }, '')\n        .slice(0, -2);\n\n      return <p className=\"my-1\">{'by ' + authorNames}</p>;\n    } else {\n      return <p className=\"text-muted font-italic my-1\">author info not available</p>;\n    }\n  }\n\n  function renderPublishedDate(publishedDate: string) {\n    if (publishedDate !== '0') {\n      return <p className=\"my-1\">{'published ' + publishedDate}</p>;\n    } else {\n      return <p className=\"text-muted font-italic my-1\">publish date not available</p>;\n    }\n  }\n\n  return (\n    <div className=\"container\">\n      <div className=\"row\">\n        <div className=\"col-2\">{renderThumbnail(book.thumbnail)}</div>\n        <div className=\"col-10 text-left\">\n          {renderTitle(book.title)}\n          {renderAuthors(book.authors)}\n          {renderPublishedDate(book.publishedDate)}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default BookCard;\n","import React from 'react';\n\ninterface PaginationPanelProps {\n  currentPage: number;\n  maxPage: number;\n  paginate(newPage: number): void;\n}\n\nfunction PaginationPanel({ currentPage, maxPage, paginate }: PaginationPanelProps) {\n  return (\n    <nav aria-label=\"Page navigation\">\n      <ul className=\"pagination justify-content-center\">\n        {currentPage !== 1 && (\n          <li className=\"page-item\">\n            <a onClick={() => paginate(currentPage - 1)} href=\"#\" className=\"page-link\" aria-label=\"Previous\">\n              <span>Prev</span>\n            </a>\n          </li>\n        )}\n\n        <li className=\"page-item\">\n          <a className=\"page-link\" href=\"#\">\n            {currentPage}\n          </a>\n        </li>\n\n        {currentPage !== maxPage && (\n          <li className=\"page-item\">\n            <a onClick={() => paginate(currentPage + 1)} href=\"#\" className=\"page-link\" aria-label=\"Next\">\n              <span>Next</span>\n            </a>\n          </li>\n        )}\n      </ul>\n    </nav>\n  );\n}\n\nexport default PaginationPanel;\n","import React from 'react';\n\ninterface BooksListHeaderProps {\n  currentPage: number;\n  totalResults: number;\n}\n\nfunction BooksListHeader({ currentPage, totalResults }: BooksListHeaderProps) {\n  return (\n    <div className=\"border-bottom text-left\">\n      <span>{`Page ${currentPage} of about ${totalResults} results`}</span>\n    </div>\n  );\n}\n\nexport default BooksListHeader;\n","import React from 'react';\nimport BookCard from './BookCard';\nimport PaginationPanel from './PaginationPanel';\nimport BooksListHeader from './BooksListHeader';\n\ninterface Book {\n  infoLink: string;\n  id: string;\n  thumbnail: string;\n  title: string;\n  publishedDate: string;\n  authors: string[];\n}\n\ninterface BooksListProps {\n  books: Book[];\n  currentPage: number;\n  maxPage: number;\n  totalResults: number;\n  paginate(newPage: number): void;\n}\n\nfunction BooksList({ books, currentPage, maxPage, totalResults, paginate }: BooksListProps) {\n  return (\n    <div className=\"container\">\n      {currentPage !== 0 && <BooksListHeader currentPage={currentPage} totalResults={totalResults} />}\n      <div className=\"row row-cols-1\">\n        {books.map((book) => (\n          <div key={book.id} className=\"col my-2 border-bottom p-2\">\n            <BookCard book={book} />\n          </div>\n        ))}\n      </div>\n      {currentPage !== 0 && <PaginationPanel currentPage={currentPage} maxPage={maxPage} paginate={paginate} />}\n    </div>\n  );\n}\n\nexport default BooksList;\n","import React, { useEffect, useState } from 'react';\nimport SearchArea from './SearchArea';\nimport axios from 'axios';\nimport BooksList from './BooksList';\n\nfunction Books() {\n  const booksPerPage = 20;\n  const [noResults, setNoResults] = useState(false);\n  const [books, setBooks] = useState([]);\n  const [searchText, setSearchText] = useState('');\n  const [sort, setSort] = useState('initial');\n  const [totalResults, setTotalResults] = useState(0);\n  const [maxPage, setMaxPage] = useState(0);\n  const [page, setPage] = useState(0);\n\n  useEffect(() => {\n    sortBooks();\n  }, [sort]);\n\n  useEffect(() => {\n    if (page !== 0) {\n      fetchBooks();\n    }\n  }, [page]);\n\n  function handleSearchInput(e: React.ChangeEvent<HTMLInputElement>) {\n    setSearchText(e.target.value);\n  }\n\n  function searchBooks() {\n    if (page !== 1) setPage(1);\n    else fetchBooks();\n  }\n\n  function paginate(newPage: number) {\n    setPage(newPage);\n  }\n\n  function fetchBooks() {\n    axios\n      .get('https://www.googleapis.com/books/v1/volumes', {\n        params: {\n          q: searchText,\n          startIndex: (page - 1) * booksPerPage,\n          maxResults: booksPerPage,\n        },\n      })\n      .then((response) => {\n        console.log(response.data);\n\n        if (response.data.totalItems === 0) {\n          setBooks([]);\n          setNoResults(true);\n          return;\n        }\n        setNoResults(false);\n        setTotalResults(response.data.totalItems);\n        setMaxPage(Math.ceil(response.data.totalItems / booksPerPage));\n\n        const bookList = extractBookList(response.data.items);\n        setBooks(bookList);\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  }\n\n  function handleSort(e: React.ChangeEvent<HTMLSelectElement>) {\n    console.log(e.target.value);\n    setSort(e.target.value);\n  }\n\n  function sortBooks() {\n    setBooks((oldBooks) => {\n      oldBooks.sort((a, b) => {\n        if (sort === 'newest') {\n          return parseInt(b.publishedDate) - parseInt(a.publishedDate);\n        } else if (sort === 'oldest') {\n          return parseInt(a.publishedDate) - parseInt(b.publishedDate);\n        }\n      });\n      return [...oldBooks];\n    });\n  }\n\n  function extractBookList(items: Array<any>) {\n    const bookList = items.map((item) => {\n      const book = {\n        infoLink: item.volumeInfo.infoLink,\n        id: item.id,\n        thumbnail: '',\n        title: '',\n        publishedDate: '',\n        authors: [],\n      };\n\n      if (item.volumeInfo.hasOwnProperty('imageLinks') === false) {\n        book.thumbnail = null;\n      } else {\n        book.thumbnail = item.volumeInfo.imageLinks.thumbnail;\n      }\n\n      if (item.volumeInfo.hasOwnProperty('title') === false) {\n        book.title = null;\n      } else {\n        book.title = item.volumeInfo.title;\n      }\n\n      if (item.volumeInfo.hasOwnProperty('publishedDate') === false) {\n        book.publishedDate = '0';\n      } else {\n        book.publishedDate = item.volumeInfo.publishedDate.substring(0, 4);\n      }\n\n      if (item.volumeInfo.hasOwnProperty('authors') === false) {\n        book.authors = null;\n      } else {\n        book.authors = item.volumeInfo.authors;\n      }\n      return book;\n    });\n\n    return bookList;\n  }\n\n  return (\n    <div className=\"container\">\n      <SearchArea handleSearchInput={handleSearchInput} searchBooks={searchBooks} handleSort={handleSort} />\n      {noResults ? (\n        <p>no results found</p>\n      ) : (\n        <BooksList books={books} currentPage={page} maxPage={maxPage} totalResults={totalResults} paginate={paginate} />\n      )}\n    </div>\n  );\n}\n\nexport default Books;\n","import React from 'react';\nimport PageHeader from './components/PageHeader';\nimport Books from './components/Books';\n\nfunction App() {\n  return (\n    <div className=\"container-fluid text-center mb-5 px-0\">\n      <PageHeader />\n      <Books />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}